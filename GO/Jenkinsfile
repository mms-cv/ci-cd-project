  env.DOCKERHUB_USERNAME = 'mms-cv'

  node("TestMachine-ut") {
    stage("PollSCM"){
      sh 'git clone https://github.com/mms-cv/ci-cd-project ; cd ci-cd-project/GO'
    }
    stage("Unit Test") {
      sh "docker run --rm -v ${WORKSPACE}:/go/src/cd-demo golang go test cd-demo -v --run Unit"
    }
    stage("Integration Test") { 
      try {
        sh "docker build -t cd-demo ."
        sh "docker rm -f cd-demo || true"
        sh "docker run -d -p 8080:8080 --name=cd-demo cd-demo"
        // env variable is used to set the server where go test will connect to run the test
        sh "docker run --rm -v ${WORKSPACE}:/go/src/cd-demo --link=cd-demo -e SERVER=cd-demo golang go test cd-demo -v --run Integration"
      }
      catch(e) {
        error "Integration Test failed"
      }finally {
        sh "docker rm -f cd-demo || true"
        sh "docker ps -aq | xargs docker rm || true"
        sh "docker images -aq -f dangling=true | xargs docker rmi || true"
      }
    }
    stage("Build") {
      sh "docker build -t ${DOCKERHUB_USERNAME}/cd-demo:${BUILD_NUMBER} ."
    }
    stage("Publish") {
     // withDockerRegistry([credentialsId: 'DockerHub']) {
     //   sh "docker push ${DOCKERHUB_USERNAME}/cd-demo:${BUILD_NUMBER}"
     // }
    }
  }

 /* node("docker-stage") {
    checkout scm

    stage("Staging") {
      try {
        sh "docker rm -f cd-demo || true"
        sh "docker run -d -p 8080:8080 --name=cd-demo ${DOCKERHUB_USERNAME}/cd-demo:${BUILD_NUMBER}"
        sh "docker run --rm -v ${WORKSPACE}:/go/src/cd-demo --link=cd-demo -e SERVER=cd-demo golang go test cd-demo -v"

      } catch(e) {
        error "Staging failed"
      } finally {
        sh "docker rm -f cd-demo || true"
        sh "docker ps -aq | xargs docker rm || true"
        sh "docker images -aq -f dangling=true | xargs docker rmi || true"
      }
    }
  }*/
